name: rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Where to redeploy"
        required: true
        type: choice
        options: [eng, test, prod]
      sha:
        description: "Commit SHA (full or short)"
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  STACK_NAME: cloud-resume-infra
  PROMO_BUCKET: cloud-resume-promo-central-515275665162
  APP_PREFIX: cloud-resume-infra

jobs:
  redeploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}   # keeps your approvals
    permissions: { id-token: write, contents: read }

    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets[format('AWS_ROLE_{0}', github.event.inputs.environment)] }}

      - name: Resolve & download packaged.yaml (allow short SHA)
        run: |
          set -euo pipefail
          BASE="s3://${PROMO_BUCKET}/${APP_PREFIX}/"
          INPUT="${{ github.event.inputs.sha }}"
          MATCH=$(aws s3 ls "$BASE" | awk '{print $2}' | sed 's/\/$//' | grep -E "^${INPUT}" | head -n1 || true)
          if [ -z "$MATCH" ]; then
            echo "No artifacts under ${BASE}${INPUT}*/"
            echo "Available prefixes:" && aws s3 ls "$BASE" || true
            exit 1
          fi
          echo "Using SHA: $MATCH"
          aws s3 cp "s3://${PROMO_BUCKET}/${APP_PREFIX}/${MATCH}/packaged.yaml" packaged.yaml

      - name: Deploy selected infra artifact (CloudFormation)
        run: |
          aws cloudformation deploy \
            --template-file packaged.yaml \
            --stack-name "${STACK_NAME}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides EnvironmentName=${{ github.event.inputs.environment }} \
            --no-fail-on-empty-changeset

      - name: Locate hosting bucket & distribution (current env)
        id: outputs
        run: |
          set -euo pipefail
          BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='LandingPage'].OutputValue" \
            --output text)
          DIST=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "dist_id=$DIST"  >> $GITHUB_OUTPUT

      - name: Restore frontend files for selected SHA (if present)
        run: |
          set -euo pipefail
          SRC_PREFIX="s3://${PROMO_BUCKET}/${APP_PREFIX}/${MATCH}/site/"
          # If the 'site/' snapshot exists, sync it back to the live hosting bucket
          if aws s3 ls "$SRC_PREFIX" >/dev/null 2>&1; then
            echo "Restoring frontend from $SRC_PREFIX"
            aws s3 sync "$SRC_PREFIX" "s3://${{ steps.outputs.outputs.bucket }}" --delete
          else
            echo "No frontend snapshot found at $SRC_PREFIX; skipping site restore."
          fi

      - name: Invalidate CloudFront (make rollback visible)
        if: ${{ steps.outputs.outputs.dist_id != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ steps.outputs.outputs.dist_id }}" \
            --paths "/*"
