name: deploy
on:
  push:
    branches: [ '**' ]

env:
  AWS_REGION: us-east-1
  PROMO_BUCKET: cloud-resume-promo-central-515275665162
  APP_PREFIX: cloud-resume-infra
  TEMPLATE_PATH: resume-infra/template.yaml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-infra-eng:
    environment: eng
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ENG }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install Python 3.11 for SAM build
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build (ENG)
        working-directory: resume-infra
        run: |
          sam build --use-container --template-file template.yaml

      # 1) Deploy first. --resolve-s3 lets SAM create/use a managed bucket
      - name: Deploy infra (ENG) with OrgId + role pattern
        working-directory: resume-infra
        run: |
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name cloud-resume-infra \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
                EnvironmentName=eng \
                OrgId=${{ secrets.ORG_ID }} \
                DeployRolePattern=GitHubActionsDeployer \
                TestAccountId=${{ secrets.TEST_ACCOUNT_ID}} \
                ProdAccountId=${{ secrets.PROD_ACCOUNT_ID}} \
                TestDeployRoleArn=${{ secrets.AWS_ROLE_ENG_TEST}} \
                ProdDeployRoleArn=${{ secrets.AWS_ROLE_ENG_PROD}}
            --no-confirm-changeset \
            --resolve-s3 \
            --no-fail-on-empty-changeset \
            --region "${{ env.AWS_REGION }}"


      - name: Package & persist SAM artifact by SHA (ENG, main only)
        if: github.ref == 'refs/heads/main'
        working-directory: resume-infra
        run: |
          aws cloudformation package \
            --template-file .aws-sam/build/template.yaml \
            --s3-bucket "$PROMO_BUCKET" \
            --s3-prefix "$APP_PREFIX/$GITHUB_SHA/lambda" \
            --output-template-file packaged.yaml

          aws s3 cp packaged.yaml "s3://${PROMO_BUCKET}/${APP_PREFIX}/${GITHUB_SHA}/packaged.yaml"


  deploy-frontend-eng:
    needs: deploy-infra-eng
    environment: eng
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ENG }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket
        id: get_bucket
        run: |
          echo "bucket=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='LandingPage'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Get CF distribution
        id: get_distribution
        run: |
          echo "distribution_id=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Sync site
        run: aws s3 sync resume-site/ s3://${{ steps.get_bucket.outputs.bucket }} --delete

      - name: Invalidate CF
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.get_distribution.outputs.distribution_id }} --paths "/*"

      - name: Get CF domain
        id: get_domain
        run: |
          echo "domain=$(aws cloudfront get-distribution --id ${{ steps.get_distribution.outputs.distribution_id }} \
            --query "Distribution.DomainName" --output text)" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: resume-site/package-lock.json

      - name: Install E2E deps (resume-site)
        working-directory: resume-site
        env:
          NPM_CONFIG_FETCH_RETRIES: '5'
          NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: '20000'
          NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: '120000'
        shell: bash
        run: |
          for i in {1..5}; do
            npm ci --no-audit --fund=false && break
            echo "npm ci failed (attempt $i). Retrying in $((i*10))s…"
            sleep $((i*10))
          done

      - name: E2E against ENG
        working-directory: resume-site
        run: node tests/e2e/test-visitor-count.js "https://${{ steps.get_domain.outputs.domain }}"

  deploy-infra-test:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: deploy-frontend-eng
    environment: test   # approvals configured in GitHub
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TEST }}
          aws-region: ${{ env.AWS_REGION }}

      #DEBUG
      - name: Debug list ENG bucket prefix
        run: aws s3 ls "s3://${PROMO_BUCKET}/${APP_PREFIX}/"

      - name: Debug list this SHA path
        run: aws s3 ls "s3://${PROMO_BUCKET}/${APP_PREFIX}/${GITHUB_SHA}/"
      #END DEBUG
          # NEW: no build/package in TEST — reuse ENG artifact
      - name: Fetch packaged.yaml for this SHA (from ENG bucket)
        run: |
          aws s3 cp "s3://${PROMO_BUCKET}/${APP_PREFIX}/${{ github.sha }}/packaged.yaml" packaged.yaml

      - name: Deploy TEST infra from artifact (no rebuild)
        run: |
          aws s3 cp "s3://${{ env.PROMO_BUCKET }}/${{ env.APP_PREFIX }}/${{ github.sha }}/packaged.yaml" packaged.yaml
          aws cloudformation deploy \
            --template-file packaged.yaml \
            --stack-name cloud-resume-infra \
            --region ${{ env.AWS_REGION }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              EnvironmentName=test \
              OrgId=${{ secrets.ORG_ID }} \
              DeployRolePattern=GitHubActionsDeployer \
              TestDeployRoleArn=${{ secrets.AWS_ROLE_TEST }} \
              ProdDeployRoleArn=${{ secrets.AWS_ROLE_PROD }}


  deploy-frontend-test:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: deploy-infra-test
    environment: test
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TEST }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket
        id: get_bucket
        run: |
          echo "bucket=$(aws cloudformation describe-stacks --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='LandingPage'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Get CF distribution
        id: get_distribution
        run: |
          echo "distribution_id=$(aws cloudformation describe-stacks --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Sync site
        run: aws s3 sync resume-site/ s3://${{ steps.get_bucket.outputs.bucket }} --delete

      - name: Invalidate CF
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.get_distribution.outputs.distribution_id }} --paths "/*"

      - name: Get CF domain
        id: get_domain
        run: |
          echo "domain=$(aws cloudfront get-distribution --id ${{ steps.get_distribution.outputs.distribution_id }} \
            --query "Distribution.DomainName" --output text)" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: resume-site/package-lock.json
      - name: Install E2E deps
        working-directory: resume-site
        run: npm ci --no-audit --fund=false
      - name: E2E against TEST
        working-directory: resume-site
        run: node tests/e2e/test-visitor-count.js "https://${{ steps.get_domain.outputs.domain }}"

  deploy-infra-prod:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: deploy-frontend-test
    environment: prod   # approvals configured in GitHub
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_PROD }}
          aws-region: ${{ env.AWS_REGION }}
      #DEBUG
      - name: Debug list ENG bucket prefix
        run: aws s3 ls "s3://${PROMO_BUCKET}/${APP_PREFIX}/"

      - name: Debug list this SHA path
        run: aws s3 ls "s3://${PROMO_BUCKET}/${APP_PREFIX}/${GITHUB_SHA}/"
      #END DEBUG
      # NEW: no build/package in PROD — reuse ENG artifact
      - name: Fetch packaged.yaml for this SHA (from ENG bucket)
        run: |
          aws s3 cp "s3://${PROMO_BUCKET}/${APP_PREFIX}/${{ github.sha }}/packaged.yaml" packaged.yaml

      - name: Deploy PROD infra from artifact (no rebuild)
        run: |
          aws cloudformation deploy \
            --template-file packaged.yaml \
            --stack-name cloud-resume-infra \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides EnvironmentName=prod \
            --no-fail-on-empty-changeset

  deploy-frontend-prod:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: deploy-infra-prod
    environment: prod
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket
        id: get_bucket
        run: |
          echo "bucket=$(aws cloudformation describe-stacks --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='LandingPage'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Get CF distribution
        id: get_distribution
        run: |
          echo "distribution_id=$(aws cloudformation describe-stacks --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Sync site
        run: aws s3 sync resume-site/ s3://${{ steps.get_bucket.outputs.bucket }} --delete

      - name: Invalidate CF
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.get_distribution.outputs.distribution_id }} --paths "/*"

      - name: Get CF domain
        id: get_domain
        run: |
          echo "domain=$(aws cloudfront get-distribution --id ${{ steps.get_distribution.outputs.distribution_id }} \
            --query "Distribution.DomainName" --output text)" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: resume-site/package-lock.json
      - name: Install E2E deps
        working-directory: resume-site
        run: npm ci --no-audit --fund=false
      - name: E2E (smoke) against PROD
        working-directory: resume-site
        run: node tests/e2e/test-visitor-count.js "https://${{ steps.get_domain.outputs.domain }}"
