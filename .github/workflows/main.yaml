name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Unit and Integration Tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # needed for OIDC
      contents: read
    
    env:
      AWS_REGION: us-east-1
      AWS_SAM_STACK_NAME: cloud-resume-infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up virtual environment and install dev requirements
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          python -m pytest resume-infra/tests/unit/

      - name: Run integration tests
        run: |
          source .venv/bin/activate
          python -m pytest resume-infra/tests/integration/

  deploy-backend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write   # needed for OIDC
      contents: read
    
    env:
      AWS_REGION: us-east-1
      AWS_SAM_STACK_NAME: cloud-resume-infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354076468099:role/GitHubActionsDeployer
          aws-region: us-east-1
          role-session-name: gha-deploy-backend-${{ github.run_id }}

      - name: Validate SAM Template
        run: sam validate --template resume-infra/template.yaml

      - name: Build SAM Application
        run: sam build --template-file resume-infra/template.yaml

      - name: Deploy SAM Application
        run: |
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name ${{ env.AWS_SAM_STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-s3

  deploy-frontend:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write   # needed for OIDC
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354076468099:role/GitHubActionsDeployer
          aws-region: us-east-1
          role-session-name: gha-deploy-frontend-${{ github.run_id }}

      - name: Get S3 bucket name from CloudFormation output
        id: get_bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='LandingPage'].OutputValue" \
            --output text)
          echo "bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Get CloudFront Distribution ID from CloudFormation output
        id: get_distribution
        run: |
          DIST_ID=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          echo "distribution_id=$DIST_ID" >> $GITHUB_OUTPUT

      - name: Deploy static site to S3
        run: |
          aws s3 sync resume-site/ s3://${{ steps.get_bucket.outputs.bucket }} --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get_distribution.outputs.distribution_id }} \
            --paths "/*"

      - name: Get CloudFront domain name
        id: get_domain
        run: |
          DOMAIN=$(aws cloudfront get-distribution \
            --id ${{ steps.get_distribution.outputs.distribution_id }} \
            --query "Distribution.DomainName" \
            --output text)
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: resume-site/package-lock.json

      - name: Install Puppeteer dependencies
        working-directory: resume-site
        env:
          NPM_CONFIG_FETCH_RETRIES: '5'
          NPM_CONFIG_FETCH_RETRY_MINTIMEOUT: '20000'
          NPM_CONFIG_FETCH_RETRY_MAXTIMEOUT: '120000'
        shell: bash
        run: |
          for i in {1..5}; do
            npm ci --no-audit --fund=false && break
            echo "npm ci failed (attempt $i). Retrying in $((i*10))sâ€¦"
            sleep $((i*10))
          done

      - name: Run Puppeteer E2E test
        working-directory: resume-site
        run: |
          npx node tests/e2e/test-visitor-count.js "https://${{ steps.get_domain.outputs.domain }}"

  root-dns:
    name: Update ROOT Route53 DNS
    runs-on: ubuntu-latest
    needs: deploy-backend   # wait until infra (CloudFront) is updated
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      PROD_ROLE_ARN: arn:aws:iam::354076468099:role/GitHubActionsDeployer
      ROOT_ROLE_ARN: arn:aws:iam::697945510911:role/RootDnsGithubDeployer
      HOSTED_ZONE_ID_SSM_PATH: /cloud-resume/root/hosted_zone_id

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 1) Assume PROD to read CF domain outputs
      - name: Configure AWS credentials for PROD (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.PROD_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-read-prod-${{ github.run_id }}

      - name: Read CloudFront target domain names from PROD stack outputs
        id: read_prod_outputs
        run: |
          APEX=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='MyDistributionDomainName'].OutputValue" \
            --output text)
          WWW=$(aws cloudformation describe-stacks \
            --stack-name cloud-resume-infra \
            --query "Stacks[0].Outputs[?OutputKey=='WwwRedirectDistributionDomainName'].OutputValue" \
            --output text)
          echo "APEX=${APEX}" >> $GITHUB_ENV
          echo "WWW=${WWW}"   >> $GITHUB_ENV

      # 2) Switch to ROOT and deploy the DNS stack
      - name: Configure AWS credentials for ROOT (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROOT_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-root-dns-${{ github.run_id }}
    
      - name: Ensure root-dns stack is updatable (ROOT)
        run: |
          set -euo pipefail
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name root-dns --region us-east-1 \
            --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")

          echo "root-dns stack status: $STATUS"

          case "$STATUS" in
            ROLLBACK_COMPLETE|ROLLBACK_FAILED|DELETE_FAILED)
              echo "Deleting wedged root-dns stack..."
              aws cloudformation delete-stack --stack-name root-dns --region us-east-1
              aws cloudformation wait stack-delete-complete --stack-name root-dns --region us-east-1
              ;;
            NOT_FOUND|CREATE_COMPLETE|UPDATE_COMPLETE|UPDATE_ROLLBACK_COMPLETE|REVIEW_IN_PROGRESS|CREATE_IN_PROGRESS|UPDATE_IN_PROGRESS)
              echo "No cleanup required."
              ;;
            *)
              echo "Proceeding without cleanup (status $STATUS)."
              ;;
          esac

      - name: Validate root-dns template (ROOT)
        run: |
          aws cloudformation validate-template \
            --template-body file://root-dns/root-dns.yaml \
            --region us-east-1

      - name: Deploy root-dns stack in ROOT
        run: |
          aws cloudformation deploy \
            --no-fail-on-empty-changeset \
            --stack-name root-dns \
            --template-file root-dns/root-dns.yaml \
            --parameter-overrides \
              HostedZoneIdSsmPath=/cloud-resume/root/hosted_zone_id \
              ApexTargetDomainName=${APEX} \
              WwwTargetDomainName=${WWW} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

