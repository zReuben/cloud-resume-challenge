AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge

  Sample SAM Template for cloud-resume-challenge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Parameters:
  EnvironmentName:
    Type: String
    AllowedValues: [prod, test, eng]
    Default: prod
  SsmPathRootDomain:
    Type: String
    Default: /cloud-resume/prod/root_domain
    Description: SSM path that holds the apex/root domain name (string)
  SsmPathCertificateArn:
    Type: String
    Default: /cloud-resume/prod/certificate_arn
    Description: SSM path that holds the ACM cert ARN (string)
  AppPrefix:                      # <— new (used in the policy path)
    Type: String
    Default: cloud-resume-infra

  # --- NEW: pass from workflow (no SSM required) ---
  OrgId:
    Type: String
    Description: "AWS Organizations ID (e.g., o-abc123xyz)"
  DeployRolePattern:
    Type: String
    Default: "GitHubActionsDeployer"   # exact role name you use in each account

Conditions:
  IsProd: !Equals [!Ref EnvironmentName, prod]
  # --- NEW ---
  IsEng:  !Equals [!Ref EnvironmentName, eng]

Resources:
  # --- NEW: central artifacts bucket exists ONLY in ENG ---
  # --- Resources ---
  PromotionArtifactsBucketCentral:
    Type: AWS::S3::Bucket
    Condition: IsEng                 # <— ensure only created in ENG
    Properties:
      BucketName: !Sub cloud-resume-promo-central-${AWS::AccountId}
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpiration:
              NoncurrentDays: 30

  PromotionArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsEng
    Properties:
      Bucket: !Ref PromotionArtifactsBucketCentral
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # Let any principal in *my AWS Organization* list the bucket
          - Sid: AllowOrgList
            Effect: Allow
            Principal: "*"
            Action: s3:ListBucket
            Resource: !Sub arn:aws:s3:::${PromotionArtifactsBucketCentral}
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId

          # Let any principal in my Org read objects under the app prefix
          - Sid: AllowOrgGetObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${PromotionArtifactsBucketCentral}/${AppPrefix}/*
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId

  LandingPage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "cloud-resume-landingpage-${EnvironmentName}-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "cloud-resume-table-${EnvironmentName}-${AWS::AccountId}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH

  MyDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases: !If
          - IsProd
          - [ !Sub "{{resolve:ssm:${SsmPathRootDomain}}}" ]
          - !Ref "AWS::NoValue"
        ViewerCertificate: !If
          - IsProd
          - 
            AcmCertificateArn: !Sub "{{resolve:ssm:${SsmPathCertificateArn}}}"
            SslSupportMethod: sni-only
          - 
            CloudFrontDefaultCertificate: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: S3Origin
          DefaultTTL: 84600 # 1 day
          MinTTL: 0 # Kept at 0 to allow cache bursting when needed
          MaxTTL: 31536000 # 1 year (for long-lived assets like images/CSS
          ForwardedValues:
            QueryString: false
        #Route API paths to API gateway (Same dist -> Same origin, = no CORS headaches)
        CacheBehaviors:
          - PathPattern: "/visitor-count*"
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods:  [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Headers:
                - Origin
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        Origins:
          #Static Site Origin (S3)
          - DomainName: !GetAtt LandingPage.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:  
              OriginAccessIdentity: ""
          #API Origin (API Gateway)
          - DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: ApiOrigin
            OriginPath: "/Prod"   # implicit SAM stage name
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LandingPage
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${LandingPage.Arn}/*"

  GetVisitorCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get/
      Handler: handler.handler
      Runtime: python3.11
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          FORCE_DEPLOY: "1"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt DynamoDBTable.Arn
      Events:
        GetVisitorCount:
          Type: Api
          Properties:
            Path: /visitor-count
            Method: GET
          Cors:
            AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
            AllowOrigin: !If
              - IsProd
              - !Sub "'https://{{resolve:ssm:${SsmPathRootDomain}}}'"
              - "'*'"

  PostVisitorCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/post/
      Handler: handler.handler
      Runtime: python3.11
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          FORCE_DEPLOY: "1"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !GetAtt DynamoDBTable.Arn
      Events:
        PostVisitorCount:
          Type: Api
          Properties:
            Path: /visitor-count
            Method: ANY
          Cors:
            AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
            AllowOrigin: !If
              - IsProd
              - !Sub "'https://{{resolve:ssm:${SsmPathRootDomain}}}'"
              - "'*'"

  PutVisitorCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/put/
      Handler: handler.handler
      Runtime: python3.11
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          FORCE_DEPLOY: "1"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt DynamoDBTable.Arn
      Events:
        PutVisitorCount:
          Type: Api
          Properties:
            Path: /visitor-count
            Method: PUT
          Cors:
            AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
            AllowOrigin: !If
              - IsProd
              - !Sub "'https://{{resolve:ssm:${SsmPathRootDomain}}}'"
              - "'*'"

  DeleteVisitorCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete/
      Handler: handler.handler
      Runtime: python3.11
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          FORCE_DEPLOY: "1"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt DynamoDBTable.Arn
      Events:
        DeleteVisitorCount:
          Type: Api
          Properties:
            Path: /visitor-count
            Method: DELETE
          Cors:
            AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
            AllowOrigin: !If
              - IsProd
              - !Sub "'https://{{resolve:ssm:${SsmPathRootDomain}}}'"
              - "'*'"

  WwwRedirectBucket:
    Type: AWS::S3::Bucket
    Condition: IsProd
    Properties:
      BucketName: !Join ['', ['www.', !Sub '{{resolve:ssm:${SsmPathRootDomain}}}']]
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub "{{resolve:ssm:${SsmPathRootDomain}}}"
          Protocol: https
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false

  WwwRedirectDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: IsProd
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Join ['', ['www.', !Sub '{{resolve:ssm:${SsmPathRootDomain}}}']]
        DefaultCacheBehavior:
          TargetOriginId: WwwRedirectOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          AcmCertificateArn: !Sub "{{resolve:ssm:${SsmPathCertificateArn}}}"
          SslSupportMethod: sni-only
        Origins:
          - Id: WwwRedirectOrigin
            DomainName: www.reubenmulholland.com.s3-website-us-east-1.amazonaws.com
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only

Outputs:
  # --- NEW (optional reference) ---
  PromotionArtifactsBucketName:
    Condition: IsEng
    Value: !Ref PromotionArtifactsBucketCentral
    Export:
      Name: !Sub ${AWS::StackName}-PromoBucket
  VisitorApiBaseUrl:
    Description: "Base URL for visitor-count GET endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/visitor-count"
  LandingPage:
    Description: "S3 bucket name for resume site"
    Value: !Ref LandingPage
    Export:
      Name: LandingPageBucketName
  CloudFrontDistributionId:
    Description: "ID of the CloudFront distribution"
    Value: !Ref MyDistribution
  MyDistributionDomainName:
    Description: "CloudFront DomainName for apex (reubenmulholland.com)"
    Value: !GetAtt MyDistribution.DomainName
    Export:
      Name: MyDistributionDomainName
  WwwRedirectDistributionDomainName:
    Condition: IsProd
    Description: "CloudFront DomainName for www redirect (www.reubenmulholland.com)"
    Value: !GetAtt WwwRedirectDistribution.DomainName
    Export:
      Name: WwwRedirectDistributionDomainName
